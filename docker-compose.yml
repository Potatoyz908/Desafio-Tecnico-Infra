version: '3.8'

# NETWORKS
networks:
  dataeng-network:
    driver: bridge

# VOLUMES
volumes:
  postgres-data:
  airflow-logs:
  superset-data:

# SERVICES
services:
  # POSTGRES - Database Principal
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5433"
    networks:
      - dataeng-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  #AIRFLOW - Webserver
  airflow-webserver:
    image: apache/airflow:2.7.3-python3.11
    container_name: airflow-webserver
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    networks:
      - dataeng-network
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # AIRFLOW - Scheduler
  airflow-scheduler:
    image: apache/airflow:2.7.3-python3.11
    container_name: airflow-scheduler
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
    networks:
      - dataeng-network
    command: scheduler
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  #AIRFLOW (Inicialização)
  airflow-init:
    image: apache/airflow:2.7.3-python3.11
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
    networks:
      - dataeng-network
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db migrate
        airflow users create \
          --username $${_AIRFLOW_WWW_USER_USERNAME} \
          --password $${_AIRFLOW_WWW_USER_PASSWORD} \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com || true
        echo "Airflow initialization completed!"

  #SUPERSET
  superset:
    image: apache/superset:3.0.1
    container_name: superset
    depends_on:
      postgres:
        condition: service_healthy
      superset-init:
        condition: service_completed_successfully
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://superset_user:superset_password@postgres:5432/superset_meta
      SUPERSET_CONFIG_PATH: /app/pythonpath/superset_config.py
      DATABASE_DB: superset_meta
      DATABASE_HOST: postgres
      DATABASE_PASSWORD: superset_password
      DATABASE_USER: superset_user
      DATABASE_PORT: ${POSTGRES_PORT}
      DATABASE_DIALECT: postgresql
      SUPERSET_LOAD_EXAMPLES: "no"
    ports:
      - "8088:8088"
    networks:
      - dataeng-network
    volumes:
      - superset-data:/app/superset_home
      - ./superset_config.py:/app/pythonpath/superset_config.py
    command: ["/bin/sh", "-c", "superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger"]
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # SUPERSET - Inicialização
  superset-init:
    image: apache/superset:3.0.1
    container_name: superset-init
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://superset_user:superset_password@postgres:5432/superset_meta
      DATABASE_DB: superset_meta
      DATABASE_HOST: postgres
      DATABASE_PASSWORD: superset_password
      DATABASE_USER: superset_user
      DATABASE_PORT: ${POSTGRES_PORT}
      DATABASE_DIALECT: postgresql
      SUPERSET_ADMIN_USERNAME: ${SUPERSET_ADMIN_USERNAME}
      SUPERSET_ADMIN_PASSWORD: ${SUPERSET_ADMIN_PASSWORD}
      SUPERSET_ADMIN_EMAIL: ${SUPERSET_ADMIN_EMAIL}
      SUPERSET_ADMIN_FIRSTNAME: ${SUPERSET_ADMIN_FIRSTNAME}
      SUPERSET_ADMIN_LASTNAME: ${SUPERSET_ADMIN_LASTNAME}
      SUPERSET_CONFIG_PATH: /app/pythonpath/superset_config.py
    volumes:
      - ./superset_config.py:/app/pythonpath/superset_config.py
    networks:
      - dataeng-network
    command:
      - /bin/sh
      - -c
      - |
        superset db upgrade &&
        superset fab create-admin \
          --username "$${SUPERSET_ADMIN_USERNAME}" \
          --firstname "$${SUPERSET_ADMIN_FIRSTNAME}" \
          --lastname "$${SUPERSET_ADMIN_LASTNAME}" \
          --email "$${SUPERSET_ADMIN_EMAIL}" \
          --password "$${SUPERSET_ADMIN_PASSWORD}" || true &&
        superset init &&
        echo 'Superset initialization completed!'
