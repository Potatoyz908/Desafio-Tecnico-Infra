# ========================================
# VARIÁVEIS DE AMBIENTE - TEMPLATE
# ========================================
# 
# INSTRUÇÕES DE USO:
# 1. Copie este arquivo para .env:
#    cp .env.example .env
#
# 2. Gere chaves secretas fortes:
#    - Fernet Key:  python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
#    - Secret Keys: openssl rand -base64 42
#
# 3. Substitua os valores de exemplo pelos valores reais
#
# 4. NUNCA versione o arquivo .env no Git!
#
# ========================================

# ========================================
# POSTGRES - Database Principal
# ========================================
# Usuário root do PostgreSQL
POSTGRES_USER=postgres

# Senha do usuário root (ALTERAR para produção!)
# Para gerar: openssl rand -base64 32
POSTGRES_PASSWORD=CHANGE_ME_STRONG_PASSWORD

# Database padrão do PostgreSQL
POSTGRES_DB=postgres

# Hostname do container (não alterar em ambiente Docker Compose)
POSTGRES_HOST=postgres

# Porta do PostgreSQL (padrão: 5432)
POSTGRES_PORT=5432

# ========================================
# AIRFLOW - Configurações
# ========================================
# UID do usuário do Airflow (padrão: 50000)
AIRFLOW_UID=50000
AIRFLOW_GID=0

# Tipo de executor (LocalExecutor para desenvolvimento)
AIRFLOW__CORE__EXECUTOR=LocalExecutor

# Carregar exemplos? (False para ambiente limpo)
AIRFLOW__CORE__LOAD_EXAMPLES=False

# Fernet Key para criptografia de conexões/variáveis no Airflow
# OBRIGATÓRIO: Gerar com: python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
AIRFLOW__CORE__FERNET_KEY=CHANGE_ME_GENERATE_FERNET_KEY

# Secret Key para sessões web do Airflow
# Gerar com: openssl rand -base64 42
AIRFLOW__WEBSERVER__SECRET_KEY=CHANGE_ME_GENERATE_SECRET_KEY

# String de conexão com o banco de metadados do Airflow
# Formato: postgresql+psycopg2://usuario:senha@host:porta/database
# ATENÇÃO: As senhas 'airflow_password' são criadas automaticamente pelo script init do Postgres
AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow_user:airflow_password@postgres:5432/airflow_meta

# Credenciais do usuário admin do Airflow
# Usado na interface web (http://localhost:8080)
_AIRFLOW_WWW_USER_USERNAME=admin
_AIRFLOW_WWW_USER_PASSWORD=CHANGE_ME_ADMIN_PASSWORD

# ========================================
# SUPERSET - Configurações
# ========================================
# Secret Key para sessões e segurança do Superset
# OBRIGATÓRIO: Gerar com: openssl rand -base64 42
SUPERSET_SECRET_KEY=CHANGE_ME_GENERATE_SUPERSET_SECRET

# Credenciais do usuário admin do Superset
# Usado na interface web (http://localhost:8088)
SUPERSET_ADMIN_USERNAME=admin
SUPERSET_ADMIN_PASSWORD=CHANGE_ME_ADMIN_PASSWORD
SUPERSET_ADMIN_EMAIL=admin@example.com
SUPERSET_ADMIN_FIRSTNAME=Admin
SUPERSET_ADMIN_LASTNAME=User

# String de conexão com o banco de metadados do Superset
# ATENÇÃO: As senhas 'superset_password' são criadas automaticamente pelo script init do Postgres
SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://superset_user:superset_password@postgres:5432/superset_meta

# Variável adicional (compatibilidade)
SUPERSET_DATABASE_URI=postgresql+psycopg2://superset_user:superset_password@postgres:5432/superset_meta

# ========================================
# ANALYTICS DATABASE (Data Warehouse)
# ========================================
# Credenciais do database analytics (usado pelas DAGs do Airflow e queries do Superset)
# ATENÇÃO: Esses usuários e senhas são criados automaticamente pelo script init do Postgres
ANALYTICS_USER=analytics_user
ANALYTICS_PASSWORD=analytics_password
ANALYTICS_DB=analytics

# ========================================
# NOTAS DE SEGURANÇA
# ========================================
# 
# DESENVOLVIMENTO:
# - As senhas de exemplo servem para testes locais
# - Usuários e databases são criados automaticamente pelo script postgres/init/01-init-databases.sql
# - Não exponha este ambiente na internet
#
# PRODUÇÃO:
# - TODAS as senhas devem ser alteradas
# - Use senhas fortes e únicas (mínimo 32 caracteres)
# - Considere usar um gerenciador de secrets (AWS Secrets Manager, Azure Key Vault, HashiCorp Vault)
# - Habilite HTTPS/TLS em todas as conexões
# - Implemente rotação regular de credenciais
# - Configure firewall e controle de acesso
# - Habilite auditoria e monitoramento
#
# COMANDOS ÚTEIS:
# - Gerar Fernet Key:  python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
# - Gerar Secret Key:  openssl rand -base64 42
# - Gerar Senha:       openssl rand -base64 32
# - Testar conexão:    docker exec -it postgres psql -U postgres
#
# ========================================
